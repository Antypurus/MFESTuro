class Turo
types
	public string = seq of char;
	public usersSet = set of User;
	public listingSet = set of Listing;
instance variables
	private Renters: set of Renter := {};
	private Listers: set of Lister := {};
	private users: usersSet := {};
	private listings: listingSet := {};
	
	private currUser: User := undefined;
	private userType: nat := 1;
	
	inv userType = 1 or userType = 2; -- 1 -> renter 2 -> lister
operations

	public getUsers: () ==> usersSet
	getUsers() == (return self.users);
	
	public getListings: () ==> listingSet
	getListings() == (return self.listings);
	
	public registerListing: Listing ==> ()
	registerListing(t_listing) == (listings := listings union {t_listing});
	
	public removeListing: Listing ==> ()
	removeListing(t_listing) == (listings := listings \ {t_listing});
	
	public registerLister: Lister ==> () 
	registerLister(t_lister) == (Listers := Listers union {t_lister}); 
	
	public registerRenter: Renter ==> ()
	registerRenter(t_renter) == (Renters := Renters union {t_renter}); 
	
	public SearchListing: Location * Date * Date ==> listingSet
	SearchListing(t_location, t_start_date, t_end_date) == 
	(
		dcl found: listingSet := {};
		
		for all listing in set listings do
		(
			dcl lstLoc: Location := listing.getLocation();
			if(lstLoc.getCity() = t_location.getCity() and lstLoc.getCountry() = t_location.getCountry()) then
			(
				if(listing.getAvailableDates().availableThrough(t_start_date,t_end_date)) then
				(
					found := found union {listing};
				);
			);
		);
		
		return found;
	);
	
	public renterLogin: string * string ==> bool
	renterLogin(t_username,t_password) ==
	(
		dcl ok: bool:=false;
		
		for all renter in set Renters do
		(
			if(renter.getUsername() = t_username)then
			(
				if(renter.verifyLogin(t_password))then
				(
					currUser := renter;
					return true;
				)else
				(
					return false;
				);
			);
		);
		return ok;
	);
		
	public listerLogin: string * string ==> bool
	listerLogin(t_username,t_password) ==
	(
		dcl ok: bool:=false;
		
		for all lister in set Listers do
		(
			if(lister.getUsername() = t_username)then
			(
				if(lister.verifyLogin(t_password))then
				(
					currUser := lister;
					userType := 2;
					return true;
				)else
				(
					return false;
				);
			);
		);
		
		return ok;
	);

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Turo