class Turo
types
	public usersSet = set of User;
	public listingSet = set of Listing;
instance variables
	private Renters: set of Renter := {};
	private Listers: set of Lister := {};
	private users: usersSet := {};
	private listing: listingSet := {};
operations

	public getUsers: () ==> usersSet
	getUsers() == (return self.users);
	
	public getListings: () ==> listingSet
	getListings() == (return self.listing);
	
	public registerListing: Listing ==> ()
	registerListing(t_listing) == (listing := listing union {t_listing});
	
	public removeListing: Listing ==> ()
	removeListing(t_listing) == (listing := listing \ {t_listing});
	
	public registerLister: Lister ==> () 
	registerLister(t_lister) == (Listers := Listers union {t_lister}); 
	
	public registerRenter: Renter ==> ()
	registerRenter(t_renter) == (Renters := Renters union {t_renter}); 
	
	public SearchListing: Location * Date * Date ==> ()		/*todo*/
	SearchListing(t_location, t_date, t_date) == (return); 

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Turo