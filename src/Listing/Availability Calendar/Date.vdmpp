class Date
types
	public string = seq of char;
	
values
	private days_in_month: nat = 30;
	private months_in_year: nat = 12;
	private day_in_year: nat = days_in_month * months_in_year;
	
instance variables
	private year:nat := 0;
	private month:nat := 0;
	private day:nat := 0;
	
operations
	protected Date: nat * nat * nat ==> Date
	Date(t_day,t_month,t_year) ==
	(
		year := t_year;
		month := t_month;
		day := t_day;
		return self
	)
	pre t_day > 0 and t_day < 31
			and t_month > 0 and t_month < 13
			and t_year > 0;
			
	public getDay: () ==> nat
	getDay() == (return self.day);
	
	public getMonth: () ==> nat
	getMonth() == (return self.month);
	
	public getYear: () ==> nat
	getYear() == (return self.year);
	
	public compare: Date ==> bool
	compare(d2) == (return (d2.day = self.day and d2.month = self.month and d2.year = self.year));
	
	public getText: () ==> string
	getText() == 
	(
		dcl ret: string := "";
		return ret
	);
	
	private daysSinceStart: () ==> nat
	daysSinceStart() ==
	(
		return self.day + self.month * days_in_month + self.year * day_in_year;
	);
	
	public daysToDate: Date ==> nat
	daysToDate(t_date) ==
	(
		return t_date.daysSinceStart() - self.daysSinceStart();
	);
	
	public getNextDay: () ==> Date
	getNextDay() == 
	(
		dcl n_day: nat := self.day + 1;
		dcl n_month: nat := self.month;
		dcl n_year: nat := self.year;
		dcl fac: DateFactory := new DateFactory();
		
		if(n_day > days_in_month) then
		(
			n_day := 1;
			n_month := n_month + 1;
		);
		
		if(n_month > months_in_year) then
		(
			n_month := 1;
			n_year := n_year + 1;
		);
		
		return fac.create_date(n_day,n_month,n_year);
	)
	
end Date