class Listing
types
	public string = seq of char;
	public extraSet = set of Extra;
instance variables
	private location: Location;
	private develiveryOptions: DeliveryOptions;
	private protectionPlan: ProtectionPlan;
	private guidelines: string := "";
	private parkingDetails: string := "";
	private faqs: string := "";
	private car: Car;
	private availableDates: AvailabilityCalendar;
	private hasInstantBook: bool := false;
	private Lister: Lister;
	private extras: extraSet := {};
operations
	public Listing: Location * DeliveryOptions * ProtectionPlan * string * string * string * Car * AvailabilityCalendar * bool * Lister * extraSet==> Listing
	Listing(t_location,t_options,t_plan,t_guidelines,t_park_details,t_faqs,t_car,t_dates,t_instant_book, t_owner,t_extras) ==
	(
		location := t_location;
		develiveryOptions := t_options;
	 	protectionPlan := t_plan;
	 	guidelines := t_guidelines;
		parkingDetails := t_park_details;
		faqs := t_faqs;
		car := t_car;
	 	availableDates := t_dates;
	 	hasInstantBook := t_instant_book;
	 	Lister := t_owner;
	 	extras:= t_extras;
	 	
		return self;
	);
	
	public getLocation: () ==> Location
	getLocation() == (return self.location);
	
	public getDeliveryOptions: () ==> DeliveryOptions
	getDeliveryOptions() == (return self.develiveryOptions);
	
	public getProtectionPlan: () ==> ProtectionPlan
	getProtectionPlan() == (return self.protectionPlan);
	
	public getGuidelines: () ==> string
	getGuidelines() == (return self.guidelines);
	
	public getParkingDetails: () ==> string
	getParkingDetails() == (return self.parkingDetails);
	
	public getFAQS: () ==> string
	getFAQS() == (return self.faqs);
	
	public getCar: () ==> Car
	getCar() == (return self.car);
	
	public getAvailableDates: () ==> AvailabilityCalendar
	getAvailableDates() == (return self.availableDates);
	
	public getLister: () ==> Lister
	getLister() == (return self.Lister);
	
	public getExtras: () ==> extraSet
	getExtras() == (return self.extras);
	
	public requestBooking: Renter * Date * Date * Date * extraSet ==> bool
	requestBooking(t_booker,t_curr_date,t_start_date,t_end_date,t_extras) ==
	(
		dcl request: BookingRequest := new BookingRequest(t_booker,self,t_start_date,t_end_date,t_extras);
		dcl wanted_dates: set of Date := t_start_date.getDatesTo(t_end_date);
		dcl notification: Notification := new BookingRequestNotification(t_curr_date,t_booker,self.car,wanted_dates,t_extras,request);
		dcl inbox: Inbox := self.Lister.getInbox();
		
		if(self.availableDates.availableThrough(t_start_date,t_end_date)) then
		(
			inbox.registerNotification(notification);
			self.Lister.addRequest(request);
			t_booker.addRequest(request);
			return true;
		)else
		(
			return false;
		);
	);
	
	public instantBook: Renter * Date * Date * Date * extraSet==> bool
	instantBook(t_booker,t_curr_date,t_start_date,t_end_date,t_extras) ==
	(
	  dcl booking: Booking := new Booking(t_booker,self,t_start_date,t_end_date,t_extras);
		dcl wanted_dates: set of Date := t_start_date.getDatesTo(t_end_date);
		dcl notification: Notification := new InstantBookNotification(t_curr_date,t_booker,self.car,wanted_dates,t_extras);
		dcl inbox: Inbox := self.Lister.getInbox();

		if(self.availableDates.availableThrough(t_start_date,t_end_date)) then
		(
			inbox.registerNotification(notification);
			availableDates.removeDates(wanted_dates);
			t_booker.addBooking(booking);
			return true;
		)else
		(
			return false;
		);
	)
	pre hasInstantBook = true;
end Listing